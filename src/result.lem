open global

type ('a, 'msg) t =
  | Result of 'a
  | Error  of 'msg

let bind r f =
  match r with
    | Result a -> f a
    | Error  s -> Error s
  end

let unit a = Result a
let fail m = Error m
let join r = bind r (fun x -> x)

let map  f rx = bind rx (unit -| f)

let app rf rx = bind rf (fun f -> map f rx)

let lift f = fun rx -> bind rx (unit -| f)

let app2 rf rx ry = app (app rf rx) ry
let app3 rf rx ry rz = app (app (app rf rx) ry) rz

let map2 f rx ry = app (map f rx) ry
let map3 f rx ry rz = app2 (map f rx) ry rz

let map_list f xs =
  List`fold_right (fun x -> map2 list`cons (f x)) xs (unit [])

let map_snd_list f init xs =
  let f' x (i, ys) =
    let (i, y) = f i x in
    (i, y::ys) in
  let rys_rev = List`fold_left (fun r x -> map (f' x) r) (unit (init, [])) xs in
  map (pair`app_right List`rev) rys_rev

let map_snd_list_alt f init xs =
  let f' (i, rys) x =
    let (i, ry) = f i x in
    (i, map2 list`cons ry rys) in
  let rys_rev = List`fold_left f (init, unit []) xs in
  pair`app_right (map List`rev) rys_rev

let of_option m = function
  | Some a -> unit a
  | None   -> fail m
end

module Operators = struct
  let (>>=) = bind
end