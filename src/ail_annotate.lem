type t =
  | Loc of location`t
  | Typ of location`t * ail`type_class

let a_loc  l   = Loc l
let a_type l t = Typ l t

let loc_of  (a, _) =
  match a with
    | Loc l   -> l
    | Typ l _ -> l
  end
let type_of (Typ _ t, _) = t
let exp_of  (_, e) = e

let exp_type_of e =
  let t =
    match type_of e with
      | ail`TExp    t -> Some t
      | ail`TLvalue t -> types`lvalue_convert t
    end in
  option`map types`pointer_convert t

let lvalue_type_of e =
  match type_of e with
    | ail`TLvalue t -> types`pointer_convert t
  end

let ctype_of e =
  match type_of e with
    | ail`TExp    t -> t
    | ail`TLvalue t -> t
  end