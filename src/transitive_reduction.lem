open global

module r = struct
  type 'a t = ('a, 'a set) map

  let emp = Pmap`empty

  let add (v1, v2) t =
    match map`find v1 t with
      | Some from_v1 -> Pmap`add v1 ({v2} union from_v1) t
      | None         -> Pmap`add v1  {v2}                t
    end

  let make edges = Set`fold (fun e r -> add e r) edges emp

  let reachable v1 v2 t =
    match map`find v1 t with
      | Some vs -> v2 IN vs
      | None    -> false
   end

  let reachable_set v1 t =
    match map`find v1 t with
      | Some vs -> vs
      | None    -> empty
    end
end

let reduce edges =
  let r = r`make edges in
  let p (v1, v2) = exist (v IN r`reachable_set v1 r). r`reachable v v2 r in
  {e | forall (e IN edges) | p e}