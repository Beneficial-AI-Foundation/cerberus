let cons x xs = x::xs
let filter_map f xs =
  let f' x ys =
    match f x with
      | Some y -> y::ys
      | None   -> ys
    end in
  List`fold_right f' xs []
let product_map f s1 s2 = [f e1 e2 | forall (e1 MEM s1) (e2 MEM s2) | true]
let product = product_map (fun x y -> (x, y))