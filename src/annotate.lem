type t = location`t * ail`type_class

let a_type l t = (l, t)

let loc_of  (ail`Exp (l, _) _) = l
let type_of (ail`Exp (_, t) _) = t
let exp_of  (ail`Exp _ e)      = e

let exp_type_of e =
  let t =
    match type_of e with
      | ail`T_EXP    t -> Some t
      | ail`T_LVALUE t -> types`lvalue_convert t
    end in
  option`map types`pointer_convert t

let lvalue_type_of e =
  match type_of e with
    | ail`T_LVALUE t -> types`pointer_convert t
  end

let ctype_of e =
  match type_of e with
    | ail`T_EXP    t -> t
    | ail`T_LVALUE t -> t
  end