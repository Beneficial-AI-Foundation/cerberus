module a = ail
module c = constraint
module t = types
module r = range

let char_bit   = c`fresh_named "char_bit"

(* Minimum and maximum  values. *)
let char_min   = c`fresh_named "char_min"
let char_max   = c`fresh_named "char_max"
let schar_min  = c`fresh_named "schar_min"
let schar_max  = c`fresh_named "schar_max"
let uchar_max  = c`fresh_named "uchar_max"
let shrt_min   = c`fresh_named "shrt_min"
let shrt_max   = c`fresh_named "shrt_max"
let ushrt_max  = c`fresh_named "ushrt_max"
let int_min    = c`fresh_named "int_min"
let int_max    = c`fresh_named "int_max"
let uint_max   = c`fresh_named "uint_max"
let long_min   = c`fresh_named "long_min"
let long_max   = c`fresh_named "long_max"
let ulong_max  = c`fresh_named "ulong_max"
let llong_min  = c`fresh_named "llong_min"
let llong_max  = c`fresh_named "llong_max"
let ullong_max = c`fresh_named "ullong_max"

(* Byte sizes. *)
let bool_size   = c`fresh_named "bool_size"
let char_size   = c`fresh_named "char_size"
let schar_size  = c`fresh_named "schar_size"
let uchar_size  = c`fresh_named "uchar_size"
let shrt_size   = c`fresh_named "shrt_size"
let ushrt_size  = c`fresh_named "ushrt_size"
let int_size    = c`fresh_named "int_size"
let uint_size   = c`fresh_named "uint_size"
let long_size   = c`fresh_named "long_size"
let ulong_size  = c`fresh_named "ulong_size"
let llong_size  = c`fresh_named "llong_size"
let ullong_size = c`fresh_named "ullong_size"

(* Alignment requirements. *)
let bool_align   = c`fresh_named "bool_align"
let char_align   = c`fresh_named "char_align"
let schar_align  = c`fresh_named "schar_align"
let uchar_align  = c`fresh_named "uchar_align"
let shrt_align   = c`fresh_named "shrt_align"
let ushrt_align  = c`fresh_named "ushrt_align"
let int_align    = c`fresh_named "int_align"
let uint_align   = c`fresh_named "uint_align"
let long_align   = c`fresh_named "long_align"
let ulong_align  = c`fresh_named "ulong_align"
let llong_align  = c`fresh_named "llong_align"
let ullong_align = c`fresh_named "ullong_align"

let inital = c`from_list [
  c`eq char_bit   (c`const (r`char_bit));

  c`le schar_min  (c`const (r`min r`schar));
  c`ge schar_max  (c`const (r`max r`schar));
  c`ge uchar_max  (c`const (r`max r`uchar));
  c`le shrt_min   (c`const (r`min r`shrt));
  c`ge shrt_max   (c`const (r`max r`shrt));
  c`ge ushrt_max  (c`const (r`max r`ushrt));
  c`le int_min    (c`const (r`min r`int));
  c`ge int_max    (c`const (r`max r`int));
  c`ge uint_max   (c`const (r`max r`uint));
  c`le long_min   (c`const (r`min r`long));
  c`ge long_max   (c`const (r`max r`long));
  c`ge ulong_max  (c`const (r`max r`ulong));
  c`le llong_min  (c`const (r`min r`llong));
  c`ge llong_max  (c`const (r`max r`llong));
  c`ge ullong_max (c`const (r`max r`ullong))
]

let conv_impl t const =
  let name =
    match t with
      | a`SIGNED a`ICHAR     -> "signed_char"
      | a`SIGNED a`SHORT     -> "signed_short"
      | a`SIGNED a`INT       -> "signed_int"
      | a`SIGNED a`LONG      -> "signed_long"
      | a`SIGNED a`LONG_LONG -> "signed_long_long"
(*
      | a`BOOL | a`UNSIGNED _ -> invalid_arg "Signed integer type was expected."
*)
    end in
  c`fn ("to_" ^ name) [const]

let min = function
  | a`BOOL                 -> c`zero
  | a`SIGNED   a`ICHAR     -> schar_min
  | a`SIGNED   a`SHORT     -> shrt_min
  | a`SIGNED   a`INT       -> int_min
  | a`SIGNED   a`LONG      -> long_min
  | a`SIGNED   a`LONG_LONG -> llong_min
  | a`UNSIGNED a`ICHAR     -> c`zero
  | a`UNSIGNED a`SHORT     -> c`zero
  | a`UNSIGNED a`INT       -> c`zero
  | a`UNSIGNED a`LONG      -> c`zero
  | a`UNSIGNED a`LONG_LONG -> c`zero
end

let max = function
  | a`BOOL                 -> c`one
  | a`SIGNED   a`ICHAR     -> schar_max
  | a`SIGNED   a`SHORT     -> shrt_max
  | a`SIGNED   a`INT       -> int_max
  | a`SIGNED   a`LONG      -> long_max
  | a`SIGNED   a`LONG_LONG -> llong_max
  | a`UNSIGNED a`ICHAR     -> uchar_max
  | a`UNSIGNED a`SHORT     -> ushrt_max
  | a`UNSIGNED a`INT       -> uint_max
  | a`UNSIGNED a`LONG      -> ulong_max
  | a`UNSIGNED a`LONG_LONG -> ullong_max
end

let min_range_of it =
  match it with
    | a`BOOL                 -> r`bool
    | a`SIGNED   a`ICHAR     -> r`schar
    | a`SIGNED   a`SHORT     -> r`shrt
    | a`SIGNED   a`INT       -> r`int
    | a`SIGNED   a`LONG      -> r`long
    | a`SIGNED   a`LONG_LONG -> r`llong
    | a`UNSIGNED a`ICHAR     -> r`uchar
    | a`UNSIGNED a`SHORT     -> r`ushrt
    | a`UNSIGNED a`INT       -> r`uint
    | a`UNSIGNED a`LONG      -> r`ulong
    | a`UNSIGNED a`LONG_LONG -> r`ullong
  end

let size_int = function
  | a`BOOL                 -> bool_size
  | a`SIGNED   a`ICHAR     -> schar_size
  | a`SIGNED   a`SHORT     -> shrt_size
  | a`SIGNED   a`INT       -> int_size
  | a`SIGNED   a`LONG      -> long_size
  | a`SIGNED   a`LONG_LONG -> llong_size
  | a`UNSIGNED a`ICHAR     -> uchar_size
  | a`UNSIGNED a`SHORT     -> ushrt_size
  | a`UNSIGNED a`INT       -> uint_size
  | a`UNSIGNED a`LONG      -> ulong_size
  | a`UNSIGNED a`LONG_LONG -> ullong_size
end    

let size = function
  | a`BASE (_, a`INTEGER i) -> size_int i
end    

let align_int = function
  | a`BOOL                 -> bool_align
  | a`SIGNED   a`ICHAR     -> schar_align
  | a`SIGNED   a`SHORT     -> shrt_align
  | a`SIGNED   a`INT       -> int_align
  | a`SIGNED   a`LONG      -> long_align
  | a`SIGNED   a`LONG_LONG -> llong_align
  | a`UNSIGNED a`ICHAR     -> uchar_align
  | a`UNSIGNED a`SHORT     -> ushrt_align
  | a`UNSIGNED a`INT       -> uint_align
  | a`UNSIGNED a`LONG      -> ulong_align
  | a`UNSIGNED a`LONG_LONG -> ullong_align
end

let in_range_int t const = c`conj (c`le (min t) const) (c`le const (max t))

let in_range t const =
  match t with
    | a`BASE (_, a`INTEGER i) -> in_range_int i const
  end

let conv_int_type i const =
  let a = c`fresh_name () in
  let constr =
    match i with
      | a`BOOL ->
          c`case (c`eq c`zero const) (c`eq a c`zero) (c`eq a c`one)
      | a`UNSIGNED _ as i ->
          c`eq a (c`modulo const (max i))
      | a`SIGNED   _ as i ->
          c`case (in_range_int i const)
            (c`eq a const)
            (c`eq a (conv_impl i const))
    end in
  let conv = c`conv_int (min_range_of i) constr const in
  (a, conv)

let conv_int t const =
  match t with
    | a`BASE (_, a`INTEGER i) -> conv_int_type i const
  end

let conv t t' const =
  match (t, t') with
    | (_, a`BASE _ (a`INTEGER i)) ->
        if types`is_integer t then
          conv_int_type i const
        else (const, c`tt)
    | _ -> (const, c`tt)
  end  

let align t addr =
  let alignment =
    match t with
      | a`BASE (_, a`INTEGER i) -> (align_int i)
      | _ -> c`one
    end in
  c`eq (c`modulo addr alignment) c`zero