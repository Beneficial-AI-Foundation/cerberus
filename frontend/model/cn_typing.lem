open import Pervasives Cn
import Symbol Ctype Loc ErrorMonad TypingError

module E = ErrorMonad
let inline (>>=) = E.bind


(*
type cn_predicate 'a 'ty = <|
  cn_pred_name: 'a;
  cn_pred_oargs: list (cn_base_type 'a * 'a);
  cn_pred_iargs: list (cn_base_type 'a * 'a);
  cn_pred_clauses: cn_clauses 'a 'ty;
|>
*)

type cn_kind =
  | CN_kind_predicate
  | CN_kind_resource of cn_pred Symbol.sym Ctype.ctype
  | CN_kind_logical of cn_base_type Ctype.ctype
  | CN_kind_oarg of cn_base_type Ctype.ctype

type cn_env = map Symbol.sym cn_kind


let rec typecheck_cn_expr env (CNExpr loc expr_) =
  match expr_ with
    | CNExpr_const cst ->
        match cst with
          | CNConst_NULL ->
              E.return (CN_kind_logical CN_loc)
          | CNConst_integer _ ->
              E.return (CN_kind_logical CN_integer)
          | CNConst_bool _ ->
              E.return (CN_kind_logical CN_bool)
        end
    | CNExpr_var sym ->
        match Map.lookup sym env with
          | Just kind ->
              E.return kind
          | Nothing ->
              E.fail loc (TypingError.TError_CN CNErr_typing_TODO)
        end
    (* | CNExpr_memberof of 'a * Symbol.identifier *)
    | CNExpr_binop CN_add e1 e2 ->
        typecheck_cn_expr env e1 >>= fun k1 ->
        typecheck_cn_expr env e2 >>= fun k2 ->
        match (k1, k2) with
          | (CN_kind_logical CN_integer, CN_kind_logical CN_integer) ->
              E.return (CN_kind_logical CN_integer)
          | (CN_kind_logical CN_loc, CN_kind_logical CN_integer) ->
              E.return (CN_kind_logical CN_loc)
          | (CN_kind_logical CN_integer, CN_kind_logical CN_loc) ->
              E.return (CN_kind_logical CN_loc)
              (* TODO: real ? *)
          | _ ->
              E.fail loc (TypingError.TError_CN CNErr_typing_TODO)
        end
    | _ ->
        E.fail loc (TypingError.TError_CN CNErr_typing_TODO)
  end



let typecheck_cn_predicate tagDefs pred =
  E.return ()

let typecheck_cn_function tagDefs pred = 
  E.return ()
