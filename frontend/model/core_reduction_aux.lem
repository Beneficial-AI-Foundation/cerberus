open import Pervasives
open import Utils
open import Core Core_aux Core_run_aux

import Decode Core_run

(* TODO: this is obviously not efficient ... *)
let is_fs_function = function
  | Implementation.BuiltinFunction str ->
      match str with
        | "printf" -> true
        | "vprintf" -> true
        | "vsnprintf" -> true
        | "rename" -> true
        | "mkdir" -> true
        | "umask" -> true
        | "chmod" -> true
        | "chdir" -> true
        | "chown" -> true
        | "opendir" -> true
        | "readdir" -> true
        | "rewinddir" -> true
        | "closedir" -> true
        | "open" -> true
        | "close" -> true
        | "write" -> true
        | "read" -> true
        | "pwrite" -> true
        | "pread" -> true
        | "link" -> true
        | "readlink" -> true
        | "stat" -> true
        | "lstat" -> true
        | "symlink" -> true
        | "rmdir" -> true
        | "truncate" -> true
        | "unlink" -> true
        | "lseek" -> true
        | _ -> false
      end
  | _ ->
      false
end

let step_fs_proc th_st iCst cvals =
  let charFromMValue errmsg = function
    | Vobject (OVinteger ival) ->
        match Mem_aux.integerFromIntegerValue ival with
          | Just n -> Decode.encode_character_constant n
          | Nothing -> error errmsg
        end
    | _ -> error errmsg
  end in
  let forceIntegerFromIntegerValue errmsg ival =
    match Mem_aux.integerFromIntegerValue ival with
      | Just n -> n
      | Nothing -> error errmsg
    end in
  match iCst with
    (* ----------------------------------------------------------- *)
    (* 7.21 Input/output <stdio.h> *)
    (* ----------------------------------------------------------- *)
    | Implementation.BuiltinFunction "printf" ->
        match cvals with
          | [Vlist _ fmt_cvals; Vlist _ args_cvals] ->
              let fmt = List.map (charFromMValue "printf") fmt_cvals in
              let args_ptrvals = List.map (function
                | Vtuple [Vctype ty; Vobject (OVpointer ptr_val)] -> (ty, ptr_val)
                | _ -> error "Core_reduction, printf the second argument should be a list of (ctype, pointer) pairs"
              end) args_cvals in
              Core_run.FS_PRINTF fmt args_ptrvals
          | _ ->
              error ("Core_reduction, printf giving arguments of wrong types ==> " ^ stringFromList Pp.stringFromCore_value cvals)
        end
    | Implementation.BuiltinFunction "vprintf" ->
        match cvals with
          | [Vobject (OVinteger fd_ival);
              Vlist _ fmt_cvals;
              Vobject (OVinteger ap_ival)] ->
                let fd = forceIntegerFromIntegerValue "vprintf" fd_ival in
                let fmt = List.map (charFromMValue "vprintf") fmt_cvals in
                let ap = forceIntegerFromIntegerValue "vprintf" ap_ival in
                Core_run.FS_VPRINTF fd fmt ap
          | _ ->
              error ("Core_reduction, vprintf giving arguments of wrong types ==> " ^ stringFromList Pp.stringFromCore_value cvals)
        end
    | Implementation.BuiltinFunction "vsnprintf" ->
        match cvals with
          | [Vobject (OVpointer ptrval);
              Vobject (OVinteger size_ival);
              Vlist _ fmt_cvals;
              Vobject (OVinteger ap_ival)] ->
                let fmt = List.map (charFromMValue "vsnprintf") fmt_cvals in
                let ap = forceIntegerFromIntegerValue "vsnprintf" ap_ival in
                Core_run.FS_VSNPRINTF ptrval size_ival fmt ap
          | _ ->
              error ("Core_reduction, vsnprintf giving arguments of wrong types ==> " ^ stringFromList Pp.stringFromCore_value cvals)
        end
    | Implementation.BuiltinFunction "rename" ->
        match cvals with
          | [Vlist _ oldpath_cvals; Vlist _ newpath_cvals] ->
              let oldpath_chars = List.map (charFromMValue "rename") oldpath_cvals in
              let newpath_chars = List.map (charFromMValue "rename") newpath_cvals in
              Core_run.FS_RENAME (String.toString oldpath_chars) (String.toString newpath_chars)
          | _ -> error "Core_reduction, rename"
        end
    (* ----------------------------------------------------------- *)
    (* Posix <sys/stat.h> *)
    (* ----------------------------------------------------------- *)
    | Implementation.BuiltinFunction "mkdir" ->
        match cvals with
          | [Vlist _ path_cvals; Vobject (OVinteger mode_ival)] ->
              let path_chars = List.map (charFromMValue "mkdir") path_cvals in
              let mode = forceIntegerFromIntegerValue "mkdir" mode_ival in
              Core_run.FS_MKDIR (String.toString path_chars) mode
          | _ -> error "mkdir"
        end
    | Implementation.BuiltinFunction "umask" ->
        match cvals with
          | [Vobject (OVinteger mode_ival)] ->
              let mode = forceIntegerFromIntegerValue "umask" mode_ival in
              Core_run.FS_UMASK mode
          | _ -> error "pread"
        end
    | Implementation.BuiltinFunction "chmod" ->
        match cvals with
          | [Vlist _ path_cvals; Vobject (OVinteger mode_ival)] ->
              let path = List.map (charFromMValue "chmod") path_cvals in
              let mode = forceIntegerFromIntegerValue "chmod" mode_ival in
              Core_run.FS_CHMOD (String.toString path) mode
          | _ -> error "chmod"
        end
    | Implementation.BuiltinFunction "chdir" ->
        match cvals with
          | [Vlist _ path_cvals] ->
              let path = List.map (charFromMValue "chdir") path_cvals in
              Core_run.FS_CHDIR (String.toString path)
          | _ -> error "chdir"
        end
    | Implementation.BuiltinFunction "chown" ->
        match cvals with
          | [Vlist _ path_cvals; Vobject (OVinteger uid_ival); Vobject (OVinteger gid_ival)] ->
              let path = List.map (charFromMValue "chown") path_cvals in
              let uid = forceIntegerFromIntegerValue "chown" uid_ival in
              let gid = forceIntegerFromIntegerValue "chown" gid_ival in
              Core_run.FS_CHOWN (String.toString path) uid gid
          | _ -> error "chown"
        end
    (* ----------------------------------------------------------- *)
    (* Posix <dirent.h> *)
    (* ----------------------------------------------------------- *)
    | Implementation.BuiltinFunction "opendir" ->
        match cvals with
          | [Vlist _ path_cvals] ->
              let path = List.map (charFromMValue "opendir") path_cvals in
              Core_run.FS_OPENDIR (String.toString path)
          | _ -> error "opendir"
        end
    | Implementation.BuiltinFunction "readdir" ->
        match cvals with
          | [Vobject (OVinteger dir_ival)] ->
              let dir = forceIntegerFromIntegerValue "readdir" dir_ival in
              Core_run.FS_READDIR dir
          | _ -> error "readdir"
        end
    | Implementation.BuiltinFunction "rewinddir" ->
        match cvals with
          | [Vobject (OVinteger dir_ival)] ->
              let dir = forceIntegerFromIntegerValue "rewinddir" dir_ival in
              Core_run.FS_REWINDDIR dir
          | _ -> error "rewinddir"
        end
    | Implementation.BuiltinFunction "closedir" ->
        match cvals with
          | [Vobject (OVinteger dir_ival)] ->
              let dir = forceIntegerFromIntegerValue "closedir" dir_ival in
              Core_run.FS_CLOSEDIR dir
          | _ -> error "closedir"
        end
    (* ----------------------------------------------------------- *)
    (* Posix <fctnl.h> *)
    (* ----------------------------------------------------------- *)
    | Implementation.BuiltinFunction "open" ->
        match cvals with
          | [Vlist _ path_cvals; Vobject (OVinteger oflag_ival)] ->
              let path_chars = List.map (charFromMValue "open") path_cvals in
              let oflag = forceIntegerFromIntegerValue "open" oflag_ival in
              Core_run.FS_OPEN (String.toString path_chars) oflag Nothing
          | _ -> error "open"
        end
    (* ----------------------------------------------------------- *)
    (* Posix <unistd.h> *)
    (* ----------------------------------------------------------- *)
    | Implementation.BuiltinFunction "close" ->
        match cvals with
          | [Vobject (OVinteger fd_ival)] ->
              let fd = forceIntegerFromIntegerValue "close" fd_ival in
              Core_run.FS_CLOSE fd
          | _ -> error "close"
        end
    | Implementation.BuiltinFunction "write" ->
        match cvals with
          | [Vobject (OVinteger fd_ival); Vlist _ buf_cvals; Vobject (OVinteger size_ival)] ->
              let buf = List.map (charFromMValue "write") buf_cvals in
              let fd = forceIntegerFromIntegerValue "write" fd_ival in
              let size = forceIntegerFromIntegerValue "write" size_ival in
              Core_run.FS_WRITE fd buf size
          | _ -> error "write"
        end
    | Implementation.BuiltinFunction "read" ->
        match cvals with
          | [Vobject (OVinteger fd_ival); Vobject (OVpointer bufptr); Vobject (OVinteger size_ival)] ->
              let fd = forceIntegerFromIntegerValue "read" fd_ival in
              let size = forceIntegerFromIntegerValue "read" size_ival in
              Core_run.FS_READ fd bufptr size
          | _ -> error "read"
        end
    | Implementation.BuiltinFunction "pwrite" ->
        match cvals with
          | [Vobject (OVinteger fd_ival); Vlist _ buf_cvals; Vobject (OVinteger size_ival); Vobject (OVinteger off_ival)] ->
              let fd = forceIntegerFromIntegerValue "pwrite" fd_ival in
              let buf = List.map (charFromMValue "pwrite") buf_cvals in
              let size = forceIntegerFromIntegerValue "pwrite" size_ival in
              let off = forceIntegerFromIntegerValue "pwrite" off_ival in
              Core_run.FS_PWRITE fd buf size off
          | _ -> error "pwrite"
        end
    | Implementation.BuiltinFunction "pread" ->
        match cvals with
          | [Vobject (OVinteger fd_ival); Vobject (OVpointer bufptr); Vobject (OVinteger size_ival); Vobject (OVinteger off_ival)] ->
              let fd = forceIntegerFromIntegerValue "pread" fd_ival in
              let size = forceIntegerFromIntegerValue "pread" size_ival in
              let off = forceIntegerFromIntegerValue "pread" off_ival in
              Core_run.FS_PREAD fd bufptr size off
          | _ -> error "pread"
        end
    | Implementation.BuiltinFunction "link" ->
        match cvals with
          | [Vlist _ oldpath_cvals; Vlist _ newpath_cvals] ->
              let oldpath = List.map (charFromMValue "link") oldpath_cvals in
              let newpath = List.map (charFromMValue "link") newpath_cvals in
              Core_run.FS_LINK (String.toString oldpath) (String.toString newpath)
          | _ -> error "link"
        end
    | Implementation.BuiltinFunction "readlink" ->
        match cvals with
          | [Vlist _ path_cvals; Vobject (OVpointer ptr); Vobject (OVinteger max_ival)] ->
              let path = List.map (charFromMValue "readlink") path_cvals in
              let max = forceIntegerFromIntegerValue "readlink" max_ival in
              Core_run.FS_READLINK (String.toString path) ptr max
          | _ -> error "readlink"
        end
    | Implementation.BuiltinFunction "stat" ->
        match cvals with
          | [Vlist _ path_cvals; Vobject (OVpointer ptr)] ->
              let path = List.map (charFromMValue "readlink") path_cvals in
              Core_run.FS_STAT (String.toString path) ptr
          | _ -> error "stat"
        end
    | Implementation.BuiltinFunction "lstat" ->
        match cvals with
          | [Vlist _ path_cvals; Vobject (OVpointer ptr)] ->
              let path = List.map (charFromMValue "readlink") path_cvals in
              Core_run.FS_LSTAT (String.toString path) ptr
          | _ -> error "lstat"
        end
    | Implementation.BuiltinFunction "symlink" ->
        match cvals with
          | [Vlist _ target_cvals; Vlist _ lpath_cvals] ->
              let target = List.map (charFromMValue "symlink") target_cvals in
              let lpath = List.map (charFromMValue "symlink") lpath_cvals in
              Core_run.FS_SYMLINK (String.toString target) (String.toString lpath)
          | _ -> error "symlink"
        end
  | Implementation.BuiltinFunction "rmdir" ->
        match cvals with
          | [Vlist _ path_cvals] ->
              let path = List.map (charFromMValue "rmdir") path_cvals in
              Core_run.FS_RMDIR (String.toString path)
          | _ -> error "rmdir"
        end
    | Implementation.BuiltinFunction "truncate" ->
        match cvals with
          | [Vlist _ path_cvals; Vobject (OVinteger len_ival)] ->
              let path_chars = List.map (charFromMValue "truncate") path_cvals in
              let len = forceIntegerFromIntegerValue "truncate" len_ival in
              Core_run.FS_TRUNCATE (String.toString path_chars) len
          | _ -> error "truncate"
        end
    | Implementation.BuiltinFunction "unlink" ->
        match cvals with
          | [Vlist _ path_cvals] ->
              let path = List.map (charFromMValue "unlink") path_cvals in
              Core_run.FS_UNLINK (String.toString path)
          | _ -> error "unlink"
        end
    | Implementation.BuiltinFunction "lseek" ->
        match cvals with
          | [Vobject (OVinteger fd_ival); Vobject (OVinteger off_ival); Vobject (OVinteger whence_ival)] ->
              let fd = forceIntegerFromIntegerValue "lseek" fd_ival in
              let off = forceIntegerFromIntegerValue "lseek" off_ival in
              let whence = forceIntegerFromIntegerValue "lseek" whence_ival in
              Core_run.FS_LSEEK fd off whence
          | _ -> error "lseek"
        end
    | Implementation.BuiltinFunction str ->
        error ("Core_reduction_aux.step_fs_proc ==> BuiltinFunction: " ^ str)
    | _ ->
        error "Core_reduction_aux.step_fs_proc ==> NOT an FS function"
end