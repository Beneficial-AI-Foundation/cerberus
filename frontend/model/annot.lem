open import Maybe
open import Pervasives
import Loc
import Symbol

type bmc_annot =
  | Abmc_id of nat (* NOTE: basically same as uid *)

type attribute = <|
  attr_ns: maybe Symbol.identifier;
  attr_id: Symbol.identifier;
  attr_args: list (Loc.t * string);
|>

type attributes =
  | Attrs of list attribute

instance (Show attributes)
  let show attrs = "ATTRS"
end

val no_attributes: attributes
let no_attributes =
  Attrs []

val combine_attributes: attributes -> attributes -> attributes
let combine_attributes (Attrs xs1) (Attrs xs2) =
  Attrs (xs1 ++ xs2)

type loop_id = nat

(* records where a label comes from *)
type label_annot = 
  | LAloop_body of loop_id
  | LAloop_continue of loop_id
  | LAloop_break of loop_id
  | LAreturn (* when an Esave is annotated with this it indicates it is the
                return label *)
  | LAswitch

type annot =
  | Astd of string (* ISO C11 Standard Annotation *)
  | Aloc of Loc.t (* C source location *)
  | Auid of string (* Unique ID *)
  | Abmc of bmc_annot
  | Aattrs of attributes (* C2X attributes *)
  | Atypedef of Symbol.sym (* (TODO: I don't like but hey)
                              must only be used on a ctype to indicate it is a unfolding of a typedef *)
  | Anot_explode (* tell the a-normalisation not to explode if-then-else *)
  | Alabel of label_annot


type loop_attributes = map loop_id attributes

val     get_loc: list annot -> maybe Loc.t
let rec get_loc annots =
  match annots with
    | [] ->
        Nothing
    | (Aloc loc :: _) ->
        Just loc
    | (Astd _ :: annots') ->
        get_loc annots'
    | (Auid _ :: annots') ->
        get_loc annots'
    | (Abmc _ :: annots') ->
        get_loc annots'
    | (Aattrs _ :: annots') ->
        get_loc annots'
    | (Anot_explode :: annots') ->
        get_loc annots'
    | (Alabel _ :: annots') ->
        get_loc annots'
  end

val get_loc_: list annot -> Loc.t
let get_loc_ annots =
  match get_loc annots with
    | Just loc -> loc
    | Nothing -> Loc.unknown
  end

val only_loc: list annot -> list annot
let only_loc annots = 
  List.filter (function Aloc _ -> true | _ -> false end) annots



val     get_attrs: list annot -> maybe attributes
let rec get_attrs annots = 
  match annots with
    | [] ->
        Nothing
    | (Aloc loc :: annots') ->
        get_attrs annots'
    | (Astd _ :: annots') ->
        get_attrs annots'
    | (Auid _ :: annots') ->
        get_attrs annots'
    | (Abmc _ :: annots') ->
        get_attrs annots'
    | (Aattrs (Attrs attributes) :: annots') ->
       match get_attrs annots' with
       | Just (Attrs attributes') -> Just (Attrs (attributes ++ attributes'))
       | Nothing -> Just (Attrs attributes)       
       end
    | (Anot_explode :: annots') ->
        get_attrs annots'
    | (Alabel _ :: annots') ->
        get_attrs annots'
  end

val get_attrs_: list annot -> attributes
let get_attrs_ annots = 
  match get_attrs annots with
  | Just attrs -> attrs
  | Nothing -> Attrs []
  end

val get_label_annot : list annot -> maybe label_annot
let rec get_label_annot annots = 
  match annots with
  | [] -> Nothing
  | Alabel la :: _ -> Just la
  | _ :: annots -> get_label_annot annots
  end


val     get_uid: list annot -> maybe string
let rec get_uid annots =
  match annots with
    | [] ->
        Nothing
    | (Aloc _ :: annots') ->
        get_uid annots'
    | (Astd _ :: annots') ->
        get_uid annots'
    | (Auid uid :: _) ->
        Just uid
    | (Abmc _ :: annots') ->
        get_uid annots'
    | (Aattrs _ :: annots') ->
        get_uid annots'
    | (Anot_explode :: annots') ->
        get_uid annots'
    | (Alabel _ :: annots') ->
        get_uid annots'
  end


(* adapting code from get_loc *)
val     explode: list annot -> bool
let rec explode annots =
  match annots with
  | Anot_explode :: _ -> false
  | _ :: annots -> explode annots
  | [] -> true
  end




val     is_return: list annot -> bool
let rec is_return annots =
  get_label_annot annots = Just LAreturn

val     is_loop_break: list annot -> bool
let rec is_loop_break annots =
  match get_label_annot annots with
  | Just (LAloop_break _) -> true
  | _ -> false
  end

